#!/bin/bash

#  ad88888ba                                        88                          88888888ba
# d8"     "8b                                       ""                          88      "8b
# Y8,                                                                           88      ,8P
# `Y8aaaaa,     ,adPPYba,  8b,dPPYba,  8b       d8  88   ,adPPYba,   ,adPPYba,  88aaaaaa8P'  88       88  8b,dPPYba,   8b,dPPYba,    ,adPPYba,  8b,dPPYba,
#   `"""""8b,  a8P_____88  88P'   "Y8  `8b     d8'  88  a8"     ""  a8P_____88  88""""88'    88       88  88P'   `"8a  88P'   `"8a  a8P_____88  88P'   "Y8
#         `8b  8PP"""""""  88           `8b   d8'   88  8b          8PP"""""""  88    `8b    88       88  88       88  88       88  8PP"""""""  88
# Y8a     a8P  "8b,   ,aa  88            `8b,d8'    88  "8a,   ,aa  "8b,   ,aa  88     `8b   "8a,   ,a88  88       88  88       88  "8b,   ,aa  88
#  "Y88888P"    `"Ybbd8"'  88              "8"      88   `"Ybbd8"'   `"Ybbd8"'  88      `8b   `"YbbdP'Y8  88       88  88       88   `"Ybbd8"'  88



#------------------------------------------------------------------------------------
# Initialisation of globals.

# bail if we try and use an unset var
set -o nounset

# Determine the current directory. There's stuff in there we want.
MYDIR=$( dirname "$(readlink -f "$0")" )

# read shell includes autogenerated by dRunner for us (it makes them when we're installed).
source "$MYDIR/utils.sh"
# we want to be in the same directory as docker-compose.yml for docker-compose to work nicely.
cd $MYDIR


#------------------------------------------------------------------------------------
# showhelp - give some info about the service. SERVICENAME and IMAGENAME are provided by variables.sh.

function showhelp {
cat <<EOF >&2

NAME
   ${SERVICENAME} - Runs minecraft

SYNOPSIS
   ${SERVICENAME} help             - This help
   ${SERVICENAME} configure [PORT] - Show configuration, or set PORT
   ${SERVICENAME} start            - Make it go!
   ${SERVICENAME} stop             - Stop it
   ${SERVICENAME} info             - Is it running?

   ${SERVICENAME} export PATH      - export world and config to PATH
   ${SERVICENAME} import PATH      - import world and config from PATH

DESCRIPTION
   Built from ${IMAGENAME}.

EOF
}

#------------------------------------------------------------------------------------
# Display the status of the service.

function showInfo {
   container_exists "${CONTAINERNAME}"  || { echo "${SERVICENAME}'s container is stopped and removed." ; exit 0 ; }
   container_running "${CONTAINERNAME}" || { echo "${SERVICENAME}'s container is stopped but not removed." ; exit 0 ; }
   echo "Minecraft is running on ${HOSTIP}:${PORT}"
}

#------------------------------------------------------------------------------------
# check if running, if so stop it.

function stopService {
   docker-compose -p "${SERVICENAME}" down
}

#------------------------------------------------------------------------------------
# The main function. We can add any commands we'd like here!

function main {
   [ "$#" -gt 0 ] || die "servicerunner must have the install argument."

   COMMAND="${1}" ; shift
   COMMANDOPTS=("-i")

   CONTAINERNAME="${SERVICENAME}_minecraft_1"

   case "$COMMAND" in
         install_end)
            # define defaults or we can't load our docker-compose.yml,
            # but don't override anything in case we're reinstalling.
            [[ -v PORT ]] || save_environment "PORT" "25565"
            ;;

         obliterate_start)
            stopService
            ;;

         uninstall_start)
            stopService
            ;;

         backup_start)
            # data volume is automatically backed up, we just need to pause the service so it's
            # warm not hot!
            #BACKUPPATH="$1"
            if container_running "${CONTAINERNAME}" ; then
               docker-compose -p "${SERVICENAME}" pause
            fi
            ;;

         backup_end)
            # resume if paused.
            #BACKUPPATH="$1"
            if container_paused "${CONTAINERNAME}" ; then
               docker-compose -p "${SERVICENAME}" unpause
            fi
            ;;

         restore_end)
            # restore only ever called into empty service
            #RESTOREPATH="$1"
            ! container_running "${CONTAINERNAME}" || die "${SERVICENAME} is running while restoring! This should never happen as restore should only work to an empty service."
            ;;

         help)
            showhelp
            ;;

         enter)
            #COMMANDOPTS=("-it")
            #dockerrun /bin/bash "$@"
            ;;

         update_start)
            ! container_running "${CONTAINERNAME}" || echo "${SERVICENAME} is running while we update. You may wish to stop then start after update to pick up changes."
            ;;

         selftest)
            ;;

         start)
            ! container_running "${CONTAINERNAME}" || die "Already running" 3

            docker-compose -p "${SERVICENAME}" up -d
            [ $? -eq 0 ] || die "Failed to launch minecraft on port $PORT :("
            showInfo
            ;;

         configure)
            [ "$#" -eq 1 ] || { echo "Minecraft is configured to run on ${HOSTIP}:${PORT}"; exit 0; }
            ! container_running "${CONTAINERNAME}" || die "Can't configure while ${SERVICENAME} is started. Stop it first."
            save_environment "PORT" "$1"
            ;;

         stop)
            stopService
            echo "New Status:"
            showInfo
            ;;

         info)
            showInfo
            ;;

         # import)
         #    [ "$#" -eq 1 ] || die "Import requires one argument (the path to of the world to be imported)."
         #    ! container_running "${CONTAINERNAME}" || die "Can't import while ${SERVICENAME} is started. Stop it first."
         #
         #    utils_import "$1" "/minecraft/data"
         #    echo "Imported minecraft world from $1."
         #    ;;
         #
         # export)
         #    [ "$#" -eq 1 ] || die "Export requires one argument (the path to export the world to)."
         #    ! container_running "${CONTAINERNAME}" || die "Can't export while ${SERVICENAME} is started. Stop it first with ${CODE_S}${SERVICENAME} stop${CODE_E}"
         #
         #    utils_export "/minecraft/data" "$1"
         #    echo "Imported minecraft world to $1."
         #    ;;

         *)
            # For the standard hooks we don't implement we're required to produce
            # no output and set exit code 127 (E_NOTIMPL).
            ! isHook ${COMMAND} || exit 127

            # for all other commands we show the help.
            showhelp
            die "Unrecognised command ${CODE_S}${COMMAND}${CODE_E}"
            ;;
   esac
}

#------------------------------------------------------------------------------------

main "$@"
exit 0
