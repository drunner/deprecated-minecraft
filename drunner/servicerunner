#!/bin/bash
                                                                                                                                                          
#  ad88888ba                                        88                          88888888ba                                                                  
# d8"     "8b                                       ""                          88      "8b                                                                 
# Y8,                                                                           88      ,8P                                                                 
# `Y8aaaaa,     ,adPPYba,  8b,dPPYba,  8b       d8  88   ,adPPYba,   ,adPPYba,  88aaaaaa8P'  88       88  8b,dPPYba,   8b,dPPYba,    ,adPPYba,  8b,dPPYba,  
#   `"""""8b,  a8P_____88  88P'   "Y8  `8b     d8'  88  a8"     ""  a8P_____88  88""""88'    88       88  88P'   `"8a  88P'   `"8a  a8P_____88  88P'   "Y8  
#         `8b  8PP"""""""  88           `8b   d8'   88  8b          8PP"""""""  88    `8b    88       88  88       88  88       88  8PP"""""""  88          
# Y8a     a8P  "8b,   ,aa  88            `8b,d8'    88  "8a,   ,aa  "8b,   ,aa  88     `8b   "8a,   ,a88  88       88  88       88  "8b,   ,aa  88          
#  "Y88888P"    `"Ybbd8"'  88              "8"      88   `"Ybbd8"'   `"Ybbd8"'  88      `8b   `"YbbdP'Y8  88       88  88       88   `"Ybbd8"'  88          



#------------------------------------------------------------------------------------
# Initialisation of globals.

set -o nounset
MYDIR=$( dirname "$(readlink -f "$0")" )
source "$MYDIR/variables.sh"
source "$MYDIR/utils.sh"
e=$(printf "\e") 
readonly CODE_S="$e[32m"
readonly CODE_E="$e[0m"


#------------------------------------------------------------------------------------
# showhelp - give some info about the service. SERVICENAME and IMAGENAME are provided by variables.sh.

function showhelp {
cat <<EOF >&2

NAME
   ${SERVICENAME} - Runs minecraft
       
SYNOPSIS
   ${SERVICENAME} help            - This help
   ${SERVICENAME} configure PORT  - Configure for port PORT
   ${SERVICENAME} start           - Make it go!
   ${SERVICENAME} stop            - Stop it
   ${SERVICENAME} status          - Is it running?
   
   ${SERVICENAME} export PATH     - export world and config to PATH
   ${SERVICENAME} import PATH     - import world and config from PATH
   
DESCRIPTION
   Built from ${IMAGENAME}.
   
EOF
}

#------------------------------------------------------------------------------------
# Run a command in the container. 

function dockerrun {
   local RVAL=0
   docker run "${COMMANDOPTS[@]}" --name="${SERVICENAME}-${COMMAND}" -h "${HOSTNAME}" "${DOCKEROPTS[@]}" "${IMAGENAME}" "$@"
   RVAL=$?
   docker rm "${SERVICENAME}-${COMMAND}" >/dev/null
   [ $RVAL -eq 0 ] || die "${SERVICENAME} ${COMMAND} failed."
}

#------------------------------------------------------------------------------------
# Run a detached command in the container. 

# detached, can't remove.
function dockerrund {
   docker run -d "${COMMANDOPTS[@]}" --name="${SERVICENAME}-${COMMAND}" -h "${HOSTNAME}" "${DOCKEROPTS[@]}" "${IMAGENAME}" "$@"
   [ $? -eq 0 ] || die "${SERVICENAME} ${COMMAND} failed."
}


#------------------------------------------------------------------------------------
# Get the port from the configuration file.

function getPort {
   PORT=$(docker run -i --name="${SERVICENAME}-getport" "${DOCKEROPTS[@]}" "${IMAGENAME}" bash -c "cat /config/port")
   RVAL=$?
   docker rm "${SERVICENAME}-getport" >/dev/null 2>&1
   [ "$RVAL" -eq 0 ] || die "Failed to get port. Please run configure first."
   [ -n "$PORT" ] || die "Run configure first!"
}

#------------------------------------------------------------------------------------
# Display the status of the service.

function showStatus {
   container_exists "${SERVICENAME}-start"  || { echo "${SERVICENAME}'s container is stopped and removed." ; exit 0 ; }
   container_running "${SERVICENAME}-start" || { echo "${SERVICENAME}'s container is stopped but not removed." ; exit 0 ; }
   getPort
   echo "Minecraft is running on ${HOSTIP}:${PORT}"   
}

#------------------------------------------------------------------------------------
# check if running, if so stop it.

function stopService {
   ! container_running "${SERVICENAME}-start" || docker stop --time=30 "${SERVICENAME}-start" >/dev/null 2>&1
   ! container_exists "${SERVICENAME}-start"  || docker rm "${SERVICENAME}-start" >/dev/null 2>&1
}

#------------------------------------------------------------------------------------
# The main function. We can add any commands we'd like here!

function main {
   [ "$#" -gt 0 ] || die "servicerunner must have the install argument."

   COMMAND="${1}" ; shift
   COMMANDOPTS=("-i")
   
   case "$COMMAND" in 
         install)
            ;;
            
         destroy)
            stopService
            ;;
                     
         backupstart)
            # data volume is automatically backed up, we just need to pause the service so it's
            # warm not hot!
            #BACKUPPATH="$1"
            ! container_running "${SERVICENAME}-start" || docker pause "${SERVICENAME}-start"
            ;;

         backupend)
            # resume if paused.
            #BACKUPPATH="$1"
            ! container_paused "${SERVICENAME}-start" || docker unpause "${SERVICENAME}-start" 
            ;;
         
         restore)
            # restore only ever called into empty service
            #RESTOREPATH="$1"
            ! container_running "${SERVICENAME}-start" || die "${SERVICENAME} is running while restoring! This should never happen as restore should only work to an empty service."
            ;;
         
         help)
            showhelp
            ;;
         
         enter)
            COMMANDOPTS=("-it")
            dockerrun /bin/bash "$@"
            ;;
         
         update)
            ! container_running "${SERVICENAME}-start" || echo "${SERVICENAME} is running while we update. You may wish to stop then start after update to pick up changes."
            ;;

         start)
            ! container_running "${SERVICENAME}-start" || die "Already running" 3 
            ! container_exists "${SERVICENAME}-start"  || docker rm "${SERVICENAME}-start" >/dev/null 2>&1

            getPort
            COMMANDOPTS=("-p=${PORT}:25565" "-p=${PORT}:25565/udp" "--restart=always")
            dockerrund java -jar /minecraft_server.1.8.7.jar                          
            [ $? -eq 0 ] || die "Failed to launch minecraft on port $PORT :("
            showStatus
            ;;
         
         configure)
            ! container_running "${SERVICENAME}-start" || die "Can't configure while ${SERVICENAME} is started. Stop it first."
            [ "$#" -eq 1 ] || { showhelp ; die "You need to specify the PORT."; }
            PORT="$1"
            
            dockerrun bash -c "echo -n $PORT > /config/port && echo eula=true > /data/eula.txt"
            ;;

         stop)
            stopService
            echo "New Status:"
            showStatus   
            ;;
         
         status)
            showStatus
            ;;
            
         import)
            [ "$#" -eq 1 ] || die "Import requires one argument (the path to of the world to be imported)."
            local SOURCEPATH=$(realpath "$1" | tr -d '\r\n')
            [ -d "$SOURCEPATH" ] || die "Path does not exist: $SOURCEPATH"
            ! container_running "${SERVICENAME}-start" || die "Can't import while ${SERVICENAME} is started. Stop it first."
            
            utils_import "$SOURCEPATH" "/data"
            echo "Imported minecraft world from $SOURCEPATH."
            ;;
            
         export)
            [ "$#" -eq 1 ] || die "Export requires one argument (the path to export the world to)."
            local DESTPATH=$(realpath "$1" | tr -d '\r\n')
            [ -d "$DESTPATH" ] || die "Please create the path first, e.g. ${CODE_S}mkdir -p ${1}${CODE_E}"
            ! container_running "${SERVICENAME}-start" || die "Can't export while ${SERVICENAME} is started. Stop it first with ${CODE_S}${SERVICENAME} stop${CODE_E}"

            utils_export "/data" "$DESTPATH"
            echo "Imported minecraft world to $DESTPATH."
            ;;            
            
         *)
            showhelp
            die "Unrecognised command ${CODE_S}${COMMAND}${CODE_E}"            
            ;;
   esac
}

#------------------------------------------------------------------------------------

main "$@"
